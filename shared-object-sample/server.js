"use strict";
const http = require('http');
const express = require('express');
const timers_1 = require("timers");
const process = require("process");
const syncs_1 = require("syncs");
require('colors');
let app = express();
let server = http.createServer(app);
let io = new syncs_1.SyncsServer(server);
server.listen(8080, () => {
    console.log("Shared Object Server Started".red);
    console.log("server address" + " http://localhost:8080".blue);
    console.log(process.pid);
});
// static file server
app.use(express.static(__dirname + '/www'));
app.get('/syncs.js', (req, res) => {
    res.send(io.clientScript);
});
let lastSize = 0;
// time shared variable
io.shared('time').string = "";
timers_1.setInterval(() => {
    io.shared('time').string = new Date().toLocaleTimeString();
    if (lastSize != io.clients.size) {
        lastSize = io.clients.size;
        console.log(io.clients.size);
    }
}, 1000);
// generate groups
let group1 = io.group('g1');
let group2 = io.group('g2');
let group3 = io.group('g3');
io.functions.registerAsMaster = function () {
    let settings = this.shared('settings');
    //handle master user settings change and apply them to group settings
    settings((event) => {
        group1.shared('settings').title = settings.title1;
        group1.shared('settings').color = settings.color1;
        group2.shared('settings').title = settings.title2;
        group2.shared('settings').color = settings.color2;
        group3.shared('settings').title = settings.title3;
        group3.shared('settings').color = settings.color3;
    });
    //set default names
    settings.title1 = "Avengers";
    settings.title2 = "Super Naturals";
    settings.title3 = "Nocturnal Animals";
    //set default colors
    settings.color1 = "red";
    settings.color2 = "green";
    settings.color3 = "blue";
};
//register clients in groups
io.functions.registerInGroup = function (name) {
    this.memberGroups.forEach(group => group.remove(this));
    io.group(name).add(this);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic2VydmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxNQUFZLElBQUksV0FBTSxNQUFNLENBQUMsQ0FBQTtBQUM3QixNQUFZLE9BQU8sV0FBTSxTQUFTLENBQUMsQ0FBQTtBQUNuQyx5QkFBMEIsUUFBUSxDQUFDLENBQUE7QUFDbkMsTUFBWSxPQUFPLFdBQU0sU0FBUyxDQUFDLENBQUE7QUFDbkMsd0JBQTBCLE9BQU8sQ0FBQyxDQUFBO0FBQ2xDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUVsQixJQUFJLEdBQUcsR0FBQyxPQUFPLEVBQUUsQ0FBQztBQUNsQixJQUFJLE1BQU0sR0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ2xDLElBQUksRUFBRSxHQUFDLElBQUksbUJBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQU0vQixNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksRUFBQztJQUNmLE9BQU8sQ0FBQyxHQUFHLENBQUMsOEJBQThCLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDaEQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsR0FBRyx3QkFBd0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM5RCxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUM3QixDQUFDLENBQUMsQ0FBQztBQUlILHFCQUFxQjtBQUNyQixHQUFHLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsU0FBUyxHQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7QUFDMUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUMsQ0FBQyxHQUFHLEVBQUMsR0FBRztJQUN4QixHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUM5QixDQUFDLENBQUMsQ0FBQztBQU9ILElBQUksUUFBUSxHQUFDLENBQUMs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